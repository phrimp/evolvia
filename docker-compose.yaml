services:
  # Consul server with environment variables for basic configuration
  consul-server:
    image: hashicorp/consul:1.15.4
    container_name: consul-server
    restart: unless-stopped
    volumes:
      - consul-data:/consul/data
    ports:
      - "${CONSUL_HTTP_PORT}:8500"
      - "${CONSUL_DNS_PORT}:8600/tcp"
      - "${CONSUL_DNS_PORT}:8600/udp"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_LOG_LEVEL=${CONSUL_LOG_LEVEL:-INFO}
      - CONSUL_LOCAL_CONFIG={"datacenter":"${CONSUL_DATACENTER:-dc1}","server":true,"ui_config":{"enabled":true},"bootstrap_expect":1,"node_name":"consul-server","bind_addr":"0.0.0.0","client_addr":"0.0.0.0","encrypt":"${CONSUL_ENCRYPT_KEY}"}
    command: "agent -server -ui -client=0.0.0.0"
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - consul-net

  # Traefik API Gateway with environment variables for basic configuration
  traefik:
    image: traefik:3.3
    container_name: traefik
    restart: unless-stopped
    depends_on:
      - consul-server
      - traefik-consul-register
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443"
      - "${TRAEFIK_DASHBOARD_PORT}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/traefik:/var/log/traefik
    environment:
      - TRAEFIK_LOG_LEVEL=DEBUG
      - TRAEFIK_ACCESSLOG=true
      - TRAEFIK_ACCESSLOG_FILEPATH=/var/log/traefik/access.log
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_API_DASHBOARD=${TRAEFIK_DASHBOARD_ENABLED:-false}
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_ENDPOINT=unix:///var/run/docker.sock
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_PROVIDERS_DOCKER_NETWORK=microservices_template_traefik-net
      - TRAEFIK_PROVIDERS_CONSUL=true
      - TRAEFIK_PROVIDERS_CONSUL_ENDPOINTS=http://consul-server:8500
      - TRAEFIK_PROVIDERS_CONSUL_ROOTKEY=${TRAEFIK_CONSUL_ROOTKEY:-traefik}
    networks:
      - consul-net
      - traefik-net

  # Keep middleware registration script for complex configurations
  traefik-consul-register:
    image: alpine:latest
    container_name: traefik-consul-register
    depends_on:
      - consul-server
    volumes:
      - ./traefik/scripts:/scripts
      - ./traefik/config:/config
      - ./.env:/.env
    command: >
      sh -c "
        apk add --no-cache curl jq bash dos2unix &&
        cd /scripts &&
        dos2unix register-traefik-config-to-consul.sh &&
        chmod +x register-traefik-config-to-consul.sh &&
        bash ./register-traefik-config-to-consul.sh
      "
    environment:
      # Middleware configurations
      - TRAEFIK_RATE_LIMIT_AVERAGE=${TRAEFIK_RATE_LIMIT_AVERAGE:-100}
      - TRAEFIK_RATE_LIMIT_BURST=${TRAEFIK_RATE_LIMIT_BURST:-50}
      - TRAEFIK_IP_WHITELIST_ENABLED=${TRAEFIK_IP_WHITELIST_ENABLED:-false}
      - TRAEFIK_IP_WHITELIST=${TRAEFIK_IP_WHITELIST:-127.0.0.1/32}
    networks:
      - consul-net

  # MongoDB Service
  mongodb:
    user: "0:0"
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-example}
    volumes:
      - mongodb_data:/data/db
    networks:
      - consul-net
      - traefik-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    depends_on:
      - mongodb
    networks:
      - consul-net
      - traefik-net
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017
      ME_CONFIG_BASICAUTH: false

  # Redis Service
  redis:
    user: "0:0"
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    command: >
      bash -c "
        mkdir -p /var/log/redis &&
        touch /var/log/redis/redis.log &&
        chmod 777 /var/log/redis/redis.log &&
        redis-server --requirepass ${REDIS_PASSWORD:-example} --loglevel ${REDIS_LOG_LEVEL:-notice} --logfile /var/log/redis/redis.log
      "
    environment:
      - REDIS_LOG_LEVEL=${REDIS_LOG_LEVEL:-notice}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-example}
    networks:
      - consul-net
      - traefik-net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-example}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  # RabbitMQ Service
  rabbitmq:
    user: "0:0"
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    command: >
      bash -c "
        mkdir -p /var/log/rabbitmq &&
        chmod 777 /var/log/rabbitmq &&
        rabbitmq-server
      "
    networks:
      - consul-net
      - traefik-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq-ui.rule=PathPrefix(`/rabbitmq`)"
      - "traefik.http.routers.rabbitmq-ui.service=rabbitmq-ui"
      - "traefik.http.services.rabbitmq-ui.loadbalancer.server.port=15672"
      - "traefik.http.middlewares.rabbitmq-ui-prefix.stripprefix.prefixes=/rabbitmq"
      - "traefik.http.routers.rabbitmq-ui.middlewares=rabbitmq-ui-prefix"
      - "traefik.docker.network=microservices_template_traefik-net"

  auth-service:
    user: "0:0"
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    restart: unless-stopped
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
      - "${AUTH_SERVICE_GRPC_PORT}:${AUTH_SERVICE_GRPC_PORT}"
    environment:
      - FE_ADDR=${FE_ADDR}
      - SERVICE_NAME=${AUTH_SERVICE_NAME}
      - PORT=${AUTH_SERVICE_PORT}
      - GRPC_PORT=${AUTH_SERVICE_GRPC_PORT}
      - CONSUL_PORT=${CONSUL_HTTP_PORT}
      - AUTH_SERVICE_NAME=${AUTH_SERVICE_NAME}
      - AUTH_SERVICE_ADDRESS=${AUTH_SERVICE_ADDRESS}
      - AUTH_HOSTNAME=${AUTH_HOSTNAME}
      - MONGO_URI=${MONGO_URI}
      - AUTH_SERVICE_MONGO_DB=${AUTH_SERVICE_MONGO_DB}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PROTOCAL=${REDIS_PROTOCAL}
      - REDIS_ADDR=${REDIS_ADDR}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - REDIS_PWD=${REDIS_PWD}
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_EXPIRY_TIME=${TOKEN_EXPIRY_TIME}
    networks:
      - consul-net
      - traefik-net
    volumes:
    - ./logs/auth-service:/evolvia/log/auth_service
    depends_on:
      - consul-server
      - traefik
      - mongodb
      - redis
    labels:
    - "traefik.enable=true"
    - "traefik.http.services.auth-service.loadbalancer.server.port=${AUTH_SERVICE_PORT}"
    - "traefik.http.routers.auth-service-public.service=auth-service"
    - "traefik.http.routers.auth-service-secure.service=auth-service"
    # Public
    - "traefik.http.routers.auth-service-public.rule=PathPrefix(`/public/auth`)"
    # Secure
    - "traefik.http.routers.auth-service-secure.rule=PathPrefix(`/protected/auth`)"
    - "traefik.http.routers.auth-service-secure.middlewares=auth-middleware"
    - "traefik.docker.network=microservices_template_traefik-net"

  middleware:
    user: "0:0"
    build:
      context: .
      dockerfile: services/middleware/Dockerfile
    restart: unless-stopped
    ports:
      - "${MIDDLEWARE_SERVICE_PORT}:${MIDDLEWARE_SERVICE_PORT}"
      - "${MIDDLEWARE_SERVICE_GRPC_PORT}:${MIDDLEWARE_SERVICE_GRPC_PORT}"
    environment:
      - SERVICE_NAME=${MIDDLEWARE_SERVICE_NAME}
      - PORT=${MIDDLEWARE_SERVICE_PORT}
      - GRPC_PORT=${MIDDLEWARE_SERVICE_GRPC_PORT}
      - CONSUL_ADDRESS=consul-server:${CONSUL_HTTP_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_EXPIRY_TIME=${TOKEN_EXPIRY_TIME}
      - MIDDLEWARE_SERVICE_NAME=${MIDDLEWARE_SERVICE_NAME}
      - MIDDLEWARE_SERVICE_ADDRESS=${MIDDLEWARE_SERVICE_ADDRESS}
      - MIDDLEWARE_HOSTNAME=${MIDDLEWARE_HOSTNAME}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PROTOCAL=${REDIS_PROTOCAL}
      - REDIS_ADDR=${REDIS_ADDR}
      - REDIS_PWD=${REDIS_PWD}
    networks:
      - consul-net
      - traefik-net
    volumes:
      - ./logs/middleware:/evolvia/log/middleware
    depends_on:
      - consul-server
      - traefik
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.middleware.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.middleware.service=middleware"
      - "traefik.http.services.middleware.loadbalancer.server.port=${MIDDLEWARE_SERVICE_PORT}"
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://middleware:${MIDDLEWARE_SERVICE_PORT}/auth/validate"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-ID,X-User-Role,X-User-Permissions"
      - "traefik.docker.network=microservices_template_traefik-net"

  object-storage-service:
    build:
      context: .
      dockerfile: services/object-storage-service/Dockerfile
    restart: unless-stopped
    ports:
      - "${OBJECT_STORAGE_SERVICE_PORT:-9210}:${OBJECT_STORAGE_SERVICE_PORT:-9210}"
    environment:
      - SERVICE_NAME=${OBJECT_STORAGE_SERVICE_NAME:-object-storage-service}
      - PORT=${OBJECT_STORAGE_SERVICE_PORT:-9210}
      - HOSTNAME=${OBJECT_STORAGE_HOSTNAME:-1}
      - READ_TIMEOUT=${READ_TIMEOUT:-15}
      - WRITE_TIMEOUT=${WRITE_TIMEOUT:-15}
      - HOST=${HOST:-0.0.0.0}
      - MONGODB_URI=${MONGO_URI:-mongodb://root:example@mongodb:27017}
      - MONGODB_DATABASE=${OBJECT_STORAGE_MONGO_DB:-object_storage}
      - MONGODB_POOL_SIZE=100
      - MONGODB_TIMEOUT=10
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT:-http://localhost}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_USE_SSL=${MINIO_USE_SSL:-false}
      - MINIO_REGION=${MINIO_REGION:-us-east-1}
      - MINIO_AVATAR_BUCKET=${MINIO_AVATAR_BUCKET:-avatars}
      - MINIO_FILE_BUCKET=${MINIO_FILE_BUCKET:-files}
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-rabbitmq}:${RABBITMQ_PASSWORD:-rabbitmq_password}@rabbitmq:${RABBITMQ_PORT:-5672}/
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-storage.events}
      - CONSUL_ADDRESS=consul-server:${CONSUL_HTTP_PORT:-8500}
    networks:
      - consul-net
      - traefik-net
    volumes:
      - ./assets:/evolvia/assets
      - ./logs/object-storage-service:/evolvia/log/object_storage_service
    depends_on:
      - consul-server
      - traefik
      - mongodb
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.object-storage-service.loadbalancer.server.port=${OBJECT_STORAGE_SERVICE_PORT:-9210}"
      - "traefik.http.routers.object-storage-service-public.service=object-storage-service"
      - "traefik.http.routers.object-storage-service-secure.service=object-storage-service"
      # Public
      - "traefik.http.routers.object-storage-service-public.rule=PathPrefix(`/public/storage`)"
      # Secure
      - "traefik.http.routers.object-storage-service-secure.rule=PathPrefix(`/protected/storage`)"
      - "traefik.http.routers.object-storage-service-secure.middlewares=auth-middleware"
      - "traefik.docker.network=microservices_template_traefik-net"
    user: "0:0"

  google-service:
    user: "0:0"
    build:
      context: .
      dockerfile: services/google-service/Dockerfile
    container_name: google-service
    restart: unless-stopped
    ports:
      - "${GOOGLE_SERVICE_PORT:-9220}:${GOOGLE_SERVICE_PORT:-9220}"
      - "${GOOGLE_SERVICE_GRPC_PORT:-9221}:${GOOGLE_SERVICE_GRPC_PORT:-9221}"
    environment:
      # Frontend Configuration
      - FE_ADDR=${FE_ADDR}
      
      # Server Configuration
      - SERVICE_NAME=${GOOGLE_SERVICE_SERVICE_NAME:-google-service}
      - SERVICE_ADDRESS=${GOOGLE_SERVICE_SERVICE_ADDRESS:-google-service}
      - SERVICE_VERSION=${GOOGLE_SERVICE_VERSION:-1.0.0}
      - PORT=${GOOGLE_SERVICE_PORT:-9220}
      - GRPC_PORT=${GOOGLE_SERVICE_GRPC_PORT:-9221}
        - HOSTNAME=${GOOGLE_SERVICE_HOSTNAME:-1}
      - READ_TIMEOUT=${GOOGLE_SERVICE_READ_TIMEOUT:-15}
      - WRITE_TIMEOUT=${GOOGLE_SERVICE_WRITE_TIMEOUT:-15}
      - HOST=${HOST:-0.0.0.0}
      
      # Consul Configuration
      - CONSUL_ADDRESS=consul-server:${CONSUL_HTTP_PORT:-8500}
      
      # Google OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL:-http://localhost/public/google/auth/callback}
      
      # SMTP/Email Configuration
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
      
      # Redis Configuration
      - REDIS_ADDR=${REDIS_ADDR:-redis:6379}
      - REDIS_PWD=${REDIS_PWD:-example}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PROTOCAL=${REDIS_PROTOCAL:-3}
      
      # RabbitMQ Configuration
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:${RABBITMQ_PORT:-5672}/
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE:-google.events}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-google-service-queue}
      - RABBITMQ_ROUTING_KEY=${RABBITMQ_ROUTING_KEY:-google.login}
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER:-google-service}
      - TOKEN_EXPIRY_TIME=${TOKEN_EXPIRY_TIME:-24}
    networks:
      - consul-net
      - traefik-net
    volumes:
      - ./logs/google-service:/evolvia/log/google_service
    depends_on:
      - consul-server
      - traefik
      - redis
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.google-service.loadbalancer.server.port=${GOOGLE_SERVICE_PORT:-9220}"
      - "traefik.http.routers.google-service-public.service=google-service"
      - "traefik.http.routers.google-service-secure.service=google-service"
      # Public routes (no authentication required)
      - "traefik.http.routers.google-service-public.rule=PathPrefix(`/public/google`)"
      # Protected routes (authentication required)  
      - "traefik.http.routers.google-service-secure.rule=PathPrefix(`/protected/google`)"
      - "traefik.http.routers.google-service-secure.middlewares=auth-middleware"
      - "traefik.docker.network=microservices_template_traefik-net"

  profile-service:
    user: "0:0"
    build:
      context: .
      dockerfile: services/profile-service/Dockerfile
    container_name: profile-service
    restart: unless-stopped
    ports:
      - "${PROFILE_SERVICE_PORT:-9230}:${PROFILE_SERVICE_PORT:-9230}"
      - "${PROFILE_SERVICE_GRPC_PORT:-9231}:${PROFILE_SERVICE_GRPC_PORT:-9231}"
    environment:
      # Server Configuration
      - SERVICE_NAME=${PROFILE_SERVICE_NAME:-profile-service}
      - SERVICE_ADDRESS=${PROFILE_SERVICE_ADDRESS:-profile-service}
      - SERVICE_VERSION=${PROFILE_SERVICE_VERSION:-1.0.0}
      - PORT=${PROFILE_SERVICE_PORT:-9230}
      - GRPC_PORT=${PROFILE_SERVICE_GRPC_PORT:-9231}
      - HOSTNAME=${PROFILE_SERVICE_HOSTNAME:-1}
      - READ_TIMEOUT=${PROFILE_SERVICE_READ_TIMEOUT:-15}
      - WRITE_TIMEOUT=${PROFILE_SERVICE_WRITE_TIMEOUT:-15}
      - HOST=${HOST:-0.0.0.0}
      
      # Consul Configuration
      - CONSUL_ADDRESS=consul-server:${CONSUL_HTTP_PORT:-8500}
      - CONSUL_PORT=${CONSUL_HTTP_PORT:-8500}
      
      # MongoDB Configuration
      - MONGO_URI=${MONGO_URI:-mongodb://root:example@mongodb:27017}
      - MONGODB_URI=${MONGO_URI:-mongodb://root:example@mongodb:27017}
      - MONGODB_DATABASE=${PROFILE_SERVICE_MONGO_DB:-profile_service}
      - PROFILE_SERVICE_MONGO_DB=${PROFILE_SERVICE_MONGO_DB:-profile_service}
      - MONGODB_POOL_SIZE=${MONGODB_POOL_SIZE:-100}
      - MONGODB_TIMEOUT=${MONGODB_TIMEOUT:-10}
      
      # Redis Configuration
      - REDIS_ADDR=${REDIS_ADDR:-redis:6379}
      - REDIS_PWD=${REDIS_PWD:-example}
      - REDIS_PASSWORD=${REDIS_PWD:-example}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PROTOCAL=${REDIS_PROTOCAL:-3}
      
      # RabbitMQ Configuration
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:${RABBITMQ_PORT:-5672}/
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE:-profile.events}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-profile-service-events}
      
      # Service Discovery
      - PROFILE_SERVICE_NAME=${PROFILE_SERVICE_NAME:-profile-service}
      - PROFILE_SERVICE_ADDRESS=${PROFILE_SERVICE_ADDRESS:-profile-service}
    networks:
      - consul-net
      - traefik-net
    volumes:
      - ./logs/profile-service:/evolvia/log/profile_service
    depends_on:
      - consul-server
      - traefik
      - mongodb
      - redis
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.profile-service.loadbalancer.server.port=${PROFILE_SERVICE_PORT:-9230}"
      - "traefik.http.routers.profile-service-public.service=profile-service"
      - "traefik.http.routers.profile-service-secure.service=profile-service"
      # Public routes (if any - currently none but keeping for future use)
      - "traefik.http.routers.profile-service-public.rule=PathPrefix(`/public/profiles`)"
      # Protected routes (authentication required)
      - "traefik.http.routers.profile-service-secure.rule=PathPrefix(`/protected/profiles`)"
      - "traefik.http.routers.profile-service-secure.middlewares=auth-middleware"
      - "traefik.docker.network=microservices_template_traefik-net"

  billing-management-service:
    user: "0:0"
    build:
      context: .
      dockerfile: services/billing-management-service/Dockerfile
    container_name: billing-management-service
    restart: unless-stopped
    ports:
      - "${BILLING_SERVICE_PORT:-9240}:${BILLING_SERVICE_PORT:-9240}"
      - "${BILLING_SERVICE_GRPC_PORT:-9241}:${BILLING_SERVICE_GRPC_PORT:-9241}"
    environment:
      # Server Configuration
      - SERVICE_NAME=${BILLING_SERVICE_NAME:-billing-management-service}
      - SERVICE_ADDRESS=${BILLING_SERVICE_ADDRESS:-billing-management-service}
      - SERVICE_VERSION=${BILLING_SERVICE_VERSION:-1.0.0}
      - PORT=${BILLING_SERVICE_PORT:-9240}
      - GRPC_PORT=${BILLING_SERVICE_GRPC_PORT:-9241}
      - HOSTNAME=${BILLING_SERVICE_HOSTNAME:-billing}
      - READ_TIMEOUT=${BILLING_SERVICE_READ_TIMEOUT:-15}
      - WRITE_TIMEOUT=${BILLING_SERVICE_WRITE_TIMEOUT:-15}
      - HOST=${HOST:-0.0.0.0}
      
      # Consul Configuration
      - CONSUL_ADDRESS=consul-server:${CONSUL_HTTP_PORT:-8500}
      - CONSUL_PORT=${CONSUL_HTTP_PORT:-8500}
      
      # MongoDB Configuration
      - MONGO_URI=${MONGO_URI:-mongodb://root:example@mongodb:27017}
      - MONGODB_URI=${MONGO_URI:-mongodb://root:example@mongodb:27017}
      - MONGODB_DATABASE=${BILLING_SERVICE_MONGO_DB:-billing_management_service}
      - BILLING_SERVICE_MONGO_DB=${BILLING_SERVICE_MONGO_DB:-billing_management_service}
      - MONGODB_POOL_SIZE=${MONGODB_POOL_SIZE:-100}
      - MONGODB_TIMEOUT=${MONGODB_TIMEOUT:-10}
      
      # Redis Configuration
      - REDIS_ADDR=${REDIS_ADDR:-redis:6379}
      - REDIS_PWD=${REDIS_PWD:-example}
      - REDIS_PASSWORD=${REDIS_PWD:-example}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PROTOCAL=${REDIS_PROTOCAL:-3}
      
      # RabbitMQ Configuration
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:${RABBITMQ_PORT:-5672}/
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE:-billing.events}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-billing-management-events}
      
      # Billing Specific Configuration
      - BILLING_CURRENCY=${BILLING_CURRENCY:-USD}
      - BILLING_GRACE_PERIOD=${BILLING_GRACE_PERIOD:-168h}
      - BILLING_INVOICE_RETENTION=${BILLING_INVOICE_RETENTION:-61320h}
      - BILLING_PAYMENT_RETRY_LIMIT=${BILLING_PAYMENT_RETRY_LIMIT:-3}
      - BILLING_PAYMENT_RETRY_DELAY=${BILLING_PAYMENT_RETRY_DELAY:-24h}
      - BILLING_WEBHOOK_RETRY_LIMIT=${BILLING_WEBHOOK_RETRY_LIMIT:-5}
      - BILLING_WEBHOOK_RETRY_DELAY=${BILLING_WEBHOOK_RETRY_DELAY:-1h}
      - BILLING_TRIAL_PERIOD_DAYS=${BILLING_TRIAL_PERIOD_DAYS:-14}
      
      # Service Discovery
      - BILLING_SERVICE_NAME=${BILLING_SERVICE_NAME:-billing-management-service}
      - BILLING_SERVICE_ADDRESS=${BILLING_SERVICE_ADDRESS:-billing-management-service}
    networks:
      - consul-net
      - traefik-net
    volumes:
      - ./logs/billing-management-service:/evolvia/log/billing_management_service
    depends_on:
      - consul-server
      - traefik
      - mongodb
      - redis
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.billing-management-service.loadbalancer.server.port=${BILLING_SERVICE_PORT:-9240}"
      - "traefik.http.routers.billing-management-service-public.service=billing-management-service"
      - "traefik.http.routers.billing-management-service-secure.service=billing-management-service"
      # Public routes (if any - for webhooks, payment callbacks)
      - "traefik.http.routers.billing-management-service-public.rule=PathPrefix(`/public/billing`)"
      # Protected routes (authentication required)
      - "traefik.http.routers.billing-management-service-secure.rule=PathPrefix(`/protected/billing`)"
      - "traefik.http.routers.billing-management-service-secure.middlewares=auth-middleware"
      - "traefik.docker.network=microservices_template_traefik-net"

  payos-service:
    user: "0:0"
    build:
      context: .
      dockerfile: services/payos-service/Dockerfile
    container_name: payos-service
    restart: unless-stopped
    ports:
      - "${PAYOS_SERVICE_PORT:-9250}:${PAYOS_SERVICE_PORT:-9250}"
    environment:
      # Server Configuration
      - ELYSIA_PORT=${PAYOS_SERVICE_PORT:-9250}
      - SERVICE_NAME=${PAYOS_SERVICE_NAME:-payos-service}
      - SERVICE_ADDRESS=${PAYOS_SERVICE_ADDRESS:-payos-service}
      - SERVICE_VERSION=${PAYOS_SERVICE_VERSION:-1.0.0}
      - PORT=${PAYOS_SERVICE_PORT:-9250}
      - HOSTNAME=${PAYOS_SERVICE_HOSTNAME:-payos}
      - HOST=${HOST:-0.0.0.0}
      
      # PayOS Configuration
      - PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
      - PAYOS_API_KEY=${PAYOS_API_KEY}
      - PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}
      
      # RabbitMQ Configuration
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:${RABBITMQ_PORT:-5672}/
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE:-payos.events}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-payos-service-events}
    networks:
      - consul-net
      - traefik-net
    volumes:
      - ./logs/payos-service:/app/logs
    depends_on:
      - rabbitmq
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.payos-service.loadbalancer.server.port=${PAYOS_SERVICE_PORT:-9250}"
      - "traefik.http.routers.payos-service-public.service=payos-service"
      - "traefik.http.routers.payos-service-secure.service=payos-service"
      # Public routes (for webhooks and payment callbacks)
      - "traefik.http.routers.payos-service-public.rule=PathPrefix(`/public`)"
      # Protected routes (authentication required)
      - "traefik.http.routers.payos-service-secure.rule=PathPrefix(`/protected`)"
      - "traefik.http.routers.payos-service-secure.middlewares=auth-middleware"
      - "traefik.docker.network=microservices_template_traefik-net"

networks:
  consul-net:
    driver: bridge
  traefik-net:
    driver: bridge
    name: microservices_template_traefik-net

volumes:
  consul-data:
  mongodb_data:
  redis_data:
  minio_data:
  rabbitmq_data:
